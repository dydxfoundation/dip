[
  {
    "DIP": 1,
    "title": "Safety Module Restoration & Staker Recovery",
    "status": "Proposed",
    "author": "Paradigm",
    "shortDescription": "Restore functionality to the Safety Module staking pool.",
    "discussions": "https://commonwealth.im/dydx/proposal/discussion/1743-safety-staking-pool-on-pause",
    "created": "2021-09-23T00:00:00.000Z",
    "preview": "**DIP Summary**\n\nRestore functionality to the Safety Module staking …",
    "basename": "DIP-1",
    "description": "\n\n\n**DIP Summary**\n\nRestore functionality to the Safety Module staking pool. Allow users who are currently staked to recover their funds and receive an additional 10% of their staked amount to make them whole.\n\n**Abstract**\n\nThe dYdX Foundation open-sourced a proposed solution that will do the following in order to minimize impact to users:\n\n\n\n* Restore functionality to the Safety Module.\n* Allow the users who are currently staked to recover their funds.\n* Reimburse those users for the missed rewards that they should have received for participating in the Safety Module, based on the consensus view of the community.\n\n**Relevant Links**\n\n\n\n* Safety Module Incident Report: [https://dydx.foundation/blog/en/outage-1](https://dydx.foundation/blog/en/outage-1)\n* Community discussion thread: [https://commonwealth.im/dydx/proposal/discussion/1743-safety-staking-pool-on-pause](https://commonwealth.im/dydx/proposal/discussion/1743-safety-staking-pool-on-pause)\n* DRC - Incident Report of the Safety Module Outage & Proposed Solution Thread: [https://commonwealth.im/dydx/proposal/discussion/1770-drc-incident-report-of-the-safety-module-outage-proposed-solution](https://commonwealth.im/dydx/proposal/discussion/1770-drc-incident-report-of-the-safety-module-outage-proposed-solution)\n* DRC Snapshot: [https://snapshot.org/#/dydxgov.eth/proposal/QmbJ5QxHr1pyShKTDaF5DjAr6vxQn8DVxshH2fyWgzDCBn](https://snapshot.org/#/dydxgov.eth/proposal/QmbJ5QxHr1pyShKTDaF5DjAr6vxQn8DVxshH2fyWgzDCBn)\n* Pull Request with Proposed Fix Implementation: [https://github.com/dydxfoundation/governance-contracts/pull/1](https://github.com/dydxfoundation/governance-contracts/pull/1)\n* Safety Module Smart Contract: [https://etherscan.io/address/0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC](https://etherscan.io/address/0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC)\n* Safety Module Documentation: [https://docs.dydx.community/dydx-governance/staking-pools/safety-staking-pool](https://docs.dydx.community/dydx-governance/staking-pools/safety-staking-pool)\n* Safety Module Blogpost: [https://dydx.foundation/blog/en/safety-staking](https://dydx.foundation/blog/en/safety-staking)\n\n**Motivation**\n\nShortly after the launch of the Safety Module staking pool, the dYdX Foundation discovered an error in the deployment process for the Safety Module smart contract. In response, access to the Safety Module staking pool was temporarily removed from [dydx.community](https://dydx.community/).\n\nFollowing the Safety Module outage, the dYdX Foundation released a detailed [incident report](https://dydx.foundation/blog/en/outage-1) explaining the cause of the error, the impact to users, a proposed solution, and lessons learned.\n\nAfter robust discussion on the Forums, a community member launched a 5-day poll on Snapshot regarding one aspect of the fix: reimbursing stakers for rewards they did not receive due to the error. The results of the poll are available [here](https://snapshot.org/#/dydxgov.eth/proposal/QmbJ5QxHr1pyShKTDaF5DjAr6vxQn8DVxshH2fyWgzDCBn). A minimum of 10K DYDX tokens was required to submit this off-chain proposal.\n\nIn aggregate, 575 DYDX token holders and delegates voted with 17,112,789 DYDX. With 413 voters and 16,682,487.634 DYDX (97.4855% of total) in agreement, there was an overwhelming consensus that stakers should receive 10% of their staked DYDX to make them whole.\n\n\n\n**Specification**\n\nThe Safety Module will be reset to a clean slate. Staking and earning of rewards will become active as soon as the fix is executed by governance. Users affected by the bug will receive funds via a separate Recovery Contract.\n\n***Reimbursement***\n\nThere are currently ~157,459 DYDX staked to the Safety Pool from 56 unique stakers. No staked funds were lost. Stakers will receive their funds via the Recovery Contract.\n\n***Additional Reimbursement***\n\nThose 56 stakers who were affected by the bug will receive an additional 15,746 DYDX, pro-rata, to make them whole. This will be paid out from the Rewards Treasury, and claimable by stakers through the same Recovery Contract. There will be no lockup on these funds.\n\nEach staker will need to call the claim() function directly on the Recovery Contract to receive their funds. They may then decide if they want to re-stake in the Safety Module.\n\n***Smart Contract Implementations:***\n\n\n\n1. The [Recovery Contract](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/safety/v2/helpers/SM2Recovery.sol) will be deployed with a hardcoded mapping from address to DYDX token amount. This amount should include the amount that was staked by that address, plus the additional 10%.\n    1. As a precaution, this contract will be upgradeable via the [Short Timelock](https://docs.dydx.community/dydx-governance/voting-and-governance/governance-parameters).\n2. The new [SafetyModuleV2](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/safety/v2/SafetyModuleV2.sol) implementation will be deployed with the following changes:\n    1. A new initializer function which:\n        1. Calls transfer() to send all held DYDX to the specified Recovery Contract address.\n        2. Calls transferFrom() to send the specified additional amount from the rewards treasury to the specified Recovery Contract address.\n        3. Restores functionality to the Safety Module by setting the correct exchange rate.\n        4. Deletes data set by the original initializer, which is now garbage due to the shift in the storage layout.\n    2. Updates DISTRIBUTION_END to account for the delayed start to the Safety Module rewards.\n    3. Updates getRevision() to return a value of 2.\n\nThe on-chain proposal to be approved by governance will include the following transaction to be executed via the [Long Timelock](https://docs.dydx.community/dydx-governance/voting-and-governance/governance-parameters):\n\n\n\n* Call upgradeAndCall() on the Safety Module [Proxy Admin](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/dependencies/open-zeppelin/ProxyAdmin.sol) contract, to atomically perform the following:\n    1. Upgrade the Safety Module to use the new implementation contract.\n    2. Run the initializer function with the agreed amount and Recovery Contract address.\n\n**Rationale**\n\nDifferent approaches were considered as to how to handle the funds that had already been staked. The “clean slate” approach of resetting the Safety Module is recommended as we believe it is the simplest and safest solution from a technical perspective.\n\nDiscussion on the forums has so far centered around two main issues:\n\n\n\n* **The need for the Safety Module fix to be passed as soon as possible:** Reaching community consensus and implementing a quick solution will allow affected addresses to recover their funds, and allow everyone to access the Safety staking pool. The Safety Module adds an additional safeguard to the protocol. It should be noted that Safety Module contract upgrades must use the long timelock, which imposes a minimum 18 day period (~1 day voting delay, 10 days voting duration, and 7 day timelock) between when a proposal is created and when it takes effect. In addition, long timelock proposals require a minimum quorum of 100 million DYDX (10% of the total supply) in order to pass. This means any solution will require broad community support as well as governance participation from dYdX investor token holders. For these reasons, it is imperative that the community approve this DIP in its simplest form as soon as possible.\n* **The amount to offer affected addresses to make them whole:** Staked DYDX tokens have been locked in the smart contract since September 7, and remain locked until a fix is implemented by governance. Given that the Staking Module only processes withdrawals on an epoch basis (every 28 days), the staked tokens would have been locked at a minimum for the remainder of the epoch. The community generally agreed that it was reasonable to make stakers whole due to this error. Consensus evolved around the need to repay stakers for the amount they reasonably could have expected to earn by staking over an epoch, plus some damages. 10% of the amount staked for each affected address is a reasonable and simple policy.\n\n**Test Cases**\n\nThe Safety Module has a full suite of [unit tests](https://github.com/dydxfoundation/governance-contracts/tree/master/test/safety-module) providing 100% code coverage. The proposed fix was simulated in both a local and forked mainnet environment. The test suite was then run, to ensure that full functionality will be restored, following the execution of the governance proposal on mainnet.\n\nIn addition to unit testing, thorough validation was performed on the mainnet state to ensure that we have a thorough and accurate understanding of both the current smart contract state on mainnet and the precise nature of the bug. This validation included checking all smart contract [state](https://github.com/dydxfoundation/governance-contracts/blob/master/test/safety-module/state.spec.ts) and [logs](https://github.com/dydxfoundation/governance-contracts/blob/master/test/safety-module/events.spec.ts), verification of the contract [bytecode](https://github.com/dydxfoundation/governance-contracts/blob/master/test/safety-module/bytecode.spec.ts), and detailed analysis of [storage slots](https://github.com/dydxfoundation/governance-contracts/blob/master/test/safety-module/storage-slots.spec.ts), including those that are not directly accessible by the contract. All test and deploy scripts are open-sourced in the dYdX Foundation [governance contracts](https://github.com/dydxfoundation/governance-contracts) repository.\n\n[Detailed instructions](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/safety/README.md) are provided on GitHub to allow anybody to run the same tests.\n\n**Implementation**\n\nA [full implementation](https://github.com/dydxfoundation/governance-contracts/tree/master/contracts/safety/v2) is open-sourced in the dYdX Foundation governance contracts repository.\n\n**Copyright**\n\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n\n\n",
    "ipfsHash": "QmZFHNmxsyhNFD96jwoa2eHTMa34KjgP8j7Y9W8URdGeS9",
    "encodeIpfsHash": "0xa21087d039fe569dd88424d4051a7e407c6d80b4fbb389280fc0b0eea9877cbe"
  },
  {
    "DIP": 2,
    "title": "Reducing liquidity provider rewards threshold from 5% to 1%",
    "status": "Implemented",
    "author": "Jacob Goh (@jteamdc)",
    "short description": "Reducing market maker threshold from 5% to 1%",
    "discussions": "https://forums.dydx.community/proposal/discussion/1805-reduce-market-maker-incentives/",
    "created": "2021-10-07T00:00:00.000Z",
    "preview": "## Simple Summary\nThe purpose of this DIP is to reduce the liquidity …",
    "basename": "DIP-2",
    "description": "\n\n## Simple Summary\nThe purpose of this DIP is to reduce the liquidity provider rewards threshold for market makers from 5% to 1% so that smaller and medium-sized market makers can be included as well.\n\n## Abstract\n\nIn reference to a thread on market maker incentives, Su Zhu from Three Arrows Capital submitted a Snapshot vote to reduce the volume threshold % for market makers to qualify to receive Liquidity Provider Rewards. \n\nThe Snapshot vote concluded with a record 764 unique voters and 55M DYDX in agreement. The majority of the community (399 voters & 86% of DYDX) supported to reduce the threshold to 1%.\n\n\n\n**Relevant Links**\n\n\n* Reference to a thread on market maker incentives:[https://forums.dydx.community/proposal/discussion/1805-reduce-market-maker-incentives/](https://forums.dydx.community/proposal/discussion/1805-reduce-market-maker-incentives/)\n* Snapshot vote for DYDX holders from Su Zhu at Three Arrows Capital: [https://snapshot.org/#/dydxgov.eth/proposal/QmXtS7CGVX7C5v2JdcJpsqWAeZrStQcogSQpP6zzhzwLmN](https://snapshot.org/#/dydxgov.eth/proposal/QmXtS7CGVX7C5v2JdcJpsqWAeZrStQcogSQpP6zzhzwLmN)\n* Maker Volume Distibution: [https://metabase.dydx.exchange/public/dashboard/5fa0ea31-27f7-4cd2-8bb0-bc24473ccaa3](https://metabase.dydx.exchange/public/dashboard/5fa0ea31-27f7-4cd2-8bb0-bc24473ccaa3)\n\n\n## Motivation\n\nHaving a high threshold of 5% is worse for liquidity on dYdX. It excludes smaller and medium-sized market makers from competing with larger market makers. \n\n5 more market makers would be included in epoch 0/1 if the threshold had been reduced to 1%.\n\n\n\n\n## Rationale\n\n Reducing this threshold from 5% to 1% will provide better competition for tight quoting and uptime (especially on alt pairs, which have had quite wide spreads) and should result in better liquidity overall across dYdX Protocol. \n\n**Copyright**\n\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n",
    "ipfsHash": "QmTxhXiG4QvSGAw75GygScspiFbsWVsdgmTmgDpTyAZG5L",
    "encodeIpfsHash": "0x53868881cd042ee75405ac8c2b76e8ee1e0959bfb4c25b3624c2ebafbcf78da7"
  },
  {
    "DIP": 3,
    "title": "Safety Module Restoration",
    "status": "Proposed",
    "author": "Paradigm",
    "shortDescription": "Restore functionality to the Safety Module staking pool.",
    "discussions": "https://commonwealth.im/dydx/proposal/discussion/1743-safety-staking-pool-on-pause",
    "created": "2021-10-14T00:00:00.000Z",
    "preview": "**DIP Summary**\n\nRestore functionality to the Safety Module staking …",
    "basename": "DIP-3",
    "description": "\n\n\n**DIP Summary**\n\nRestore functionality to the Safety Module staking pool. Recover locked funds and send them to the Rewards Treasury.\n\n**Abstract**\n\nAn error in the Safety Module deployment led to stakers' funds being stuck in the contract. As a result, we submitted [DIP-1](https://github.com/danrobinson/dip/blob/master/content/dips/DIP-1.md) as a proposal to fix the Safety Module, return funds to stakers, and compensate stakers for their missed rewards and inconvenience.\n\nThe on-chain vote for DIP-1 failed. This new proposal aims to fix the Safety Module in the same way proposed by DIP-1, but without making any reimbursements or other compensation for users (this could be addressed by governance seperately). Funds locked in the Safety Module will be sent to the Rewards Treasury.\n\n**Relevant Links**\n\n\n\n* Safety Module Incident Report: [https://dydx.foundation/blog/en/outage-1](https://dydx.foundation/blog/en/outage-1)\n* Community discussion thread: [https://commonwealth.im/dydx/proposal/discussion/1743-safety-staking-pool-on-pause](https://commonwealth.im/dydx/proposal/discussion/1743-safety-staking-pool-on-pause)\n* DRC - Incident Report of the Safety Module Outage & Proposed Solution Thread: [https://commonwealth.im/dydx/proposal/discussion/1770-drc-incident-report-of-the-safety-module-outage-proposed-solution](https://commonwealth.im/dydx/proposal/discussion/1770-drc-incident-report-of-the-safety-module-outage-proposed-solution)\n* DRC Snapshot: [https://snapshot.org/#/dydxgov.eth/proposal/QmbJ5QxHr1pyShKTDaF5DjAr6vxQn8DVxshH2fyWgzDCBn](https://snapshot.org/#/dydxgov.eth/proposal/QmbJ5QxHr1pyShKTDaF5DjAr6vxQn8DVxshH2fyWgzDCBn)\n* Pull Request with Proposed Fix Implementation: [https://github.com/dydxfoundation/governance-contracts/pull/1](https://github.com/dydxfoundation/governance-contracts/pull/1)\n* Safety Module Smart Contract: [https://etherscan.io/address/0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC](https://etherscan.io/address/0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC)\n* Safety Module Documentation: [https://docs.dydx.community/dydx-governance/staking-pools/safety-staking-pool](https://docs.dydx.community/dydx-governance/staking-pools/safety-staking-pool)\n* Safety Module Blogpost: [https://dydx.foundation/blog/en/safety-staking](https://dydx.foundation/blog/en/safety-staking)\n\n**Motivation**\n\nAs discussed in DIP-1, following the Safety Module outage, the dYdX Foundation released a detailed [incident report](https://dydx.foundation/blog/en/outage-1) explaining the cause of the error, the impact to users, a proposed solution, and lessons learned. This proposal aims to fix the Safety Module in as simple a way as possible.\n\n**Specification**\n\nThe Safety Module will be reset to a clean slate. Staking and earning of rewards will become active as soon as the fix is executed by governance.\n\n***Smart Contract Implementations:***\n\n* The new [SafetyModuleV2](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/safety/v2/SafetyModuleV2.sol) implementation will be deployed with the following changes:\n    1. A new initializer function which:\n        1. Calls transfer() to send all held DYDX to the Rewards Treasury.\n        2. Restores functionality to the Safety Module by setting the correct exchange rate.\n        3. Deletes data set by the original initializer, which is now garbage due to the shift in the storage layout.\n    2. Updates DISTRIBUTION_END to account for the delayed start to the Safety Module rewards.\n    3. Updates getRevision() to return a value of 2.\n\nThe on-chain proposal to be approved by governance will include the following transaction to be executed via the [Long Timelock](https://docs.dydx.community/dydx-governance/voting-and-governance/governance-parameters):\n\n\n\n* Call upgradeAndCall() on the Safety Module [Proxy Admin](https://github.com/dydxfoundation/governance-contracts/blob/dd1c396733a245ffb0faac15f657ace87d289b92/contracts/dependencies/open-zeppelin/ProxyAdmin.sol) contract, to atomically perform the following:\n    1. Upgrade the Safety Module to use the new implementation contract.\n    2. Run the initializer function.\n\n**Rationale**\n\nDifferent approaches were considered as to how to handle the funds that had already been staked. The “clean slate” approach of resetting the Safety Module is recommended as we believe it is the simplest and safest solution from a technical perspective.\n\nReaching community consensus and implementing a quick solution will allow recovery of the locked funds, and allow everyone access to the Safety Module staking pool. The Safety Module adds an important, additional safeguard to the protocol. It should be noted that Safety Module contract upgrades must use the long timelock, which imposes a minimum 18 day period (~1 day voting delay, 10 days voting duration, and 7 day timelock) between when a proposal is created and when it takes effect. In addition, long timelock proposals require a minimum quorum of 100 million DYDX (10% of the total supply) in order to pass. This means any solution will require broad community support as well as governance participation from dYdX investor token holders. For these reasons, it is imperative that the community approve this DIP in its simplest form as soon as possible.\n\n**Test Cases**\n\nThe Safety Module has a full suite of [unit tests](https://github.com/dydxfoundation/governance-contracts/tree/master/test/safety-module) providing 100% code coverage. The proposed fix was simulated in both a local and forked mainnet environment. The test suite was then run, to ensure that full functionality will be restored, following the execution of the governance proposal on mainnet.\n\nIn addition to unit testing, thorough validation was performed on the mainnet state to ensure that we have a thorough and accurate understanding of both the current smart contract state on mainnet and the precise nature of the bug. This validation included checking all smart contract [state](https://github.com/dydxfoundation/governance-contracts/blob/master/test/safety-module/state.spec.ts) and [logs](https://github.com/dydxfoundation/governance-contracts/blob/master/test/safety-module/events.spec.ts), verification of the contract [bytecode](https://github.com/dydxfoundation/governance-contracts/blob/master/test/safety-module/bytecode.spec.ts), and detailed analysis of [storage slots](https://github.com/dydxfoundation/governance-contracts/blob/master/test/safety-module/storage-slots.spec.ts), including those that are not directly accessible by the contract. All test and deploy scripts are open-sourced in the dYdX Foundation [governance contracts](https://github.com/dydxfoundation/governance-contracts) repository.\n\n[Detailed instructions](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/safety/README.md) are provided on GitHub to allow anybody to run the same tests.\n\n**Implementation**\n\nA [full implementation](https://github.com/dydxfoundation/governance-contracts/tree/master/contracts/safety/v2) is open-sourced in the dYdX Foundation governance contracts repository.\n\n**Copyright**\n\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n",
    "ipfsHash": "QmSDfpzkGsp4X1C92XvCnxZrNLcnGsai6oxhLVgMsABAxH",
    "encodeIpfsHash": "0x39a4f2729cd8ffaee39540b8e7efca36a0a1c98ecb9cb216afa0f412248f6faa"
  },
  {
    "DIP": 4,
    "title": "Safety Module Staker Reimbursement and Compensation",
    "status": "Proposed",
    "author": "Jacob Goh (@jteamdc)",
    "shortDescription": "Reimburse and compensate the early Safety Module stakers whose funds were stuck.",
    "discussions": "https://commonwealth.im/dydx/proposal/discussion/1743-safety-staking-pool-on-pause",
    "created": "2021-10-14T00:00:00.000Z",
    "preview": "**DIP Summary**\n\nReimburse early Safety Module stakers for the full …",
    "basename": "DIP-4",
    "description": "\n\n\n**DIP Summary**\n\nReimburse early Safety Module stakers for the full amount of their staked funds, plus an additional 10% compensation.\n\n**Abstract**\n\nAn error in the Safety Module deployment led to stakers' funds being stuck in the contract. As a result, DIP-1 was submitted as a proposal to fix the Safety Module, return funds to stakers, and compensate stakers for their missed rewards and inconvenience.\n\nThe on-chain vote for DIP-1 failed. This new proposal aims to enact the reimbursement and compensation plan that would have taken effect under DIP-1. Unlike DIP-1, this proposal does not fix the Safety Module itself. This proposal is therefore governed by the parameters of the short timelock, which has a much lower quorum requirement than the long timelock.\n\n**Relevant Links**\n\n* Safety Module Incident Report: [https://dydx.foundation/blog/en/outage-1](https://dydx.foundation/blog/en/outage-1)\n* Community discussion thread: [https://commonwealth.im/dydx/proposal/discussion/1743-safety-staking-pool-on-pause](https://commonwealth.im/dydx/proposal/discussion/1743-safety-staking-pool-on-pause)\n* DRC - Incident Report of the Safety Module Outage & Proposed Solution Thread: [https://commonwealth.im/dydx/proposal/discussion/1770-drc-incident-report-of-the-safety-module-outage-proposed-solution](https://commonwealth.im/dydx/proposal/discussion/1770-drc-incident-report-of-the-safety-module-outage-proposed-solution)\n* DRC Snapshot: [https://snapshot.org/#/dydxgov.eth/proposal/QmbJ5QxHr1pyShKTDaF5DjAr6vxQn8DVxshH2fyWgzDCBn](https://snapshot.org/#/dydxgov.eth/proposal/QmbJ5QxHr1pyShKTDaF5DjAr6vxQn8DVxshH2fyWgzDCBn)\n* Pull Request with Proposed Fix Implementation: [https://github.com/dydxfoundation/governance-contracts/pull/1](https://github.com/dydxfoundation/governance-contracts/pull/1)\n* Safety Module Smart Contract: [https://etherscan.io/address/0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC](https://etherscan.io/address/0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC)\n* Safety Module Documentation: [https://docs.dydx.community/dydx-governance/staking-pools/safety-staking-pool](https://docs.dydx.community/dydx-governance/staking-pools/safety-staking-pool)\n* Safety Module Blogpost: [https://dydx.foundation/blog/en/safety-staking](https://dydx.foundation/blog/en/safety-staking)\n\n**Motivation**\n\nAs discussed in DIP-1, following the Safety Module outage, the dYdX Foundation released a detailed [incident report](https://dydx.foundation/blog/en/outage-1) explaining the cause of the error, the impact to users, a proposed solution, and lessons learned.\n\nAfter robust discussion on the Forums, a community member launched a 5-day poll on Snapshot regarding the question of reimbursing stakers for rewards they did not receive due to the outage. The results of the poll are available [here](https://snapshot.org/#/dydxgov.eth/proposal/QmbJ5QxHr1pyShKTDaF5DjAr6vxQn8DVxshH2fyWgzDCBn). In aggregate, 575 DYDX token holders and delegates voted with 17,112,789 DYDX. With 413 voters and 16,682,487.634 DYDX (97.4855% of total) in agreement, there was an overwhelming consensus that stakers should receive 10% of their staked DYDX to make them whole.\n\n**Specification**\n\nUsers affected by the Safety Module outage will receive funds via a Recovery Contract. The same contract that was deployed as part of the DIP-1 implementation will be used.\n\n***Reimbursement***\n\nThere are currently ~157,459 DYDX staked to the Safety Pool from 56 unique stakers. These funds are recoverable by governance via the long timelock.\n\nThis DIP specifies that action be taken via the **short timelock** to withdraw the same amount of DYDX from the Rewards Treasury to fund the Recovery Contract. This allows the stakers to get their funds back sooner.\n\n***Additional Reimbursement***\n\nThose 56 stakers who were affected by the bug will receive an additional 15,746 DYDX, pro-rata, to make them whole. This will be paid out from the Rewards Treasury, and claimable by stakers through the same Recovery Contract. There will be no lockup on these funds.\n\nEach staker will need to call the claim() function directly on the Recovery Contract to receive their funds. They may then decide if they want to re-stake in the Safety Module.\n\n***Smart Contract Implementations:***\n\n* The [Recovery Contract](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/safety/v2/helpers/SM2Recovery.sol) will be deployed with a hardcoded mapping from address to DYDX token amount. This amount should include the amount that was staked by that address, plus the additional 10%.\n    * As a precaution, this contract will be upgradeable via the [Short Timelock](https://docs.dydx.community/dydx-governance/voting-and-governance/governance-parameters).\n\nThe on-chain proposal to be approved by governance will include the following transaction to be executed via the [Short Timelock](https://docs.dydx.community/dydx-governance/voting-and-governance/governance-parameters):\n\n* Call transfer() on the [Rewards Treasury](https://github.com/dydxfoundation/governance-contracts/blob/336cb686b0c50693639a0fdb639d0b8f3b0670b3/contracts/treasury/Treasury.sol) contract, to transfer ~15,746 DYDX to the [Recovery Contract](https://github.com/dydxfoundation/governance-contracts/blob/336cb686b0c50693639a0fdb639d0b8f3b0670b3/contracts/safety/v2/helpers/SM2Recovery.sol) which was previously deployed to `0xF3f6e3fad2D453ca0Ce3c8580ecBE801F04c5662`.\n\n**Rationale**\n\nStaked DYDX tokens have been locked in the smart contract since September 7, and remain locked until a fix is implemented by governance. Given that the Staking Module only processes withdrawals on an epoch basis (every 28 days), the staked tokens would have been locked at a minimum for the remainder of the epoch. The community generally agreed that it was reasonable to make stakers whole due to this error. Consensus evolved around the need to repay stakers for the amount they reasonably could have expected to earn by staking over an epoch, plus some damages. 10% of the amount staked for each affected address is a reasonable and simple policy.\n\n**Test Cases**\n\nThe recovery contract implementation, as well as test and deploy scripts, were open-sourced in the dYdX Foundation [governance contracts](https://github.com/dydxfoundation/governance-contracts) repository. The reimbursement process was thoroughly tested in both test and mainnet fork environments.\n\n[Detailed instructions](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/safety/README.md) are provided on GitHub to allow anybody to run the same tests.\n\n**Implementation**\n\nA [full implementation](https://github.com/dydxfoundation/governance-contracts/tree/master/contracts/safety/v2) is open-sourced in the dYdX Foundation governance contracts repository.\n\n**Copyright**\n\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n",
    "ipfsHash": "QmenjymprVdXs1TcqTQGU6xMa4fsMpHSYrGt9sh2Q2YnVq",
    "encodeIpfsHash": "0xf46a0d016423b39604aa1b72aee420847f981579c4b5e0c7a1d8d3210705df64"
  },
  {
    "DIP": 5,
    "title": "Upgrade the StarkProxy smart contract",
    "status": "Proposed",
    "author": "Yuriy Myronovych (@YuriyWintermute)",
    "short description": "Upgrade StarkProxy smart contracts to support deposit cancellation and recovery.",
    "discussions": "https://forums.dydx.community/proposal/discussion/2437-drc-smart-contract-upgrade-for-market-maker-borrowers-from-liquidity-staking-pool/",
    "preview": "## Simple Summary\n\nUpgrade StarkProxy smart contracts to support …",
    "basename": "DIP-5",
    "description": "\n\n## Simple Summary\n\nUpgrade StarkProxy smart contracts to support deposit cancellation and recovery.\n\n## Abstract\n\nWhen depositing USDC to the dYdX Layer 2 exchange, the funds are held in a bridge contract while waiting for the deposit to be processed by the L2 sequencer and prover. While funds are on the bridge awaiting confirmation, the depositor can initiate a time-locked recovery process to cancel the deposit. This functionality is not currently supported by the Stark Proxy smart contracts which manage the funds borrowed by market makers from the Liquidity Module staking pool. These Stark Proxy smart contracts should be upgraded to support deposit cancelation and recovery.\n\n## Motivation\n\nOn October 27, 2021 09:37:37 AM +UTC, we (Wintermute) borrowed 50 million USDC (transaction [here](https://etherscan.io/tx/0xa9cc82d4d8e6360538bb3c61e91a6c2494d98d7644d4516b0456a8008dad0e47)) from the [Liquidity Staking Pool](https://docs.dydx.community/dydx-governance/staking-pools/liquidity-staking-pool) and attempted to deposit the funds to our trading account on the dYdX exchange. We had to send deposit programmatically because the client provided by the dYdX Foundation team does not support wallet-connect yet. Unfortunately, the wrong “vaultId” parameter was passed in the call to “depositToExchange” (transaction [here](https://etherscan.io/tx/0xe6a1130a56abf62a076ef4210a28da20e06226295b54fc52b89a6b61850dca8e)). Because this “vaultId” did not correspond to our STARK key, the deposit was invalid and could not be confirmed on L2.\nThe 50M USDC are safely held by the dYdX L2 exchange smart contract and can be reclaimed by the StarkProxy contract. However, to reclaim the funds, the StarkProxy contract must call “depositCancel” and “depositReclaim” on the L2 exchange smart contract. \nUpgrading these smart contracts would allow us to recover the 50M USDC and ensure that other market makers can safely make use of the Liquidity Staking Pool.\n\nFollowing a forum DRC [thread](https://forums.dydx.community/proposal/discussion/2437-drc-smart-contract-upgrade-for-market-maker-borrowers-from-liquidity-staking-pool/), Wintermute launched a 5-day poll on Snapshot regarding the question of Stark Proxy upgrade. The results of the poll are available [here](https://snapshot.org/#/dydxgov.eth/proposal/0x3d62d5b77b2b9bd3ab1c42c296cc36ccf89f77bea22815081e785d5d28d32366). The Snapshot vote has concluded with 5.3M DYDX (99.92%) from 474 voters indicating consensus in favor of the DRC. \n\n## Specification\n\nWhen market makers borrow funds from the Liquidity Module staking pool they must do so via a StarkProxy smart contract which manages the funds and limits how they may be used. The StarkProxy borrows funds from the pool using a “borrow” call and then deposits those to the exchange using “depositToExchange” providing multiple parameters in transaction data describing which account should be credited. This deposit transaction transfers funds to the dYdX L2 exchange smart contract ([here](https://etherscan.io/address/0xd54f502e184b6b739d7d27a6410a67dc462d69c8)) and, if a deposit is valid, it is submitted and confirmed on L2. If the deposit parameters are misspecified by the caller, it may not be possible to credit the deposit. In such a case, as long as the “starkKey” was correctly specified in the deposit, the depositor can reclaim their funds using the “depositCancel” and “depositReclaim” functions. This process is described [here](https://docs.starkware.co/starkex-v3/starkex-deep-dive/smart-contracts-1/public-interactions#deposit).\nSince “depositCancel” and “depositReclaim” are not currently implemented on the StarkProxy contract, it is not possible for those contracts to reclaim funds in the case where a deposit transaction is malformed and unable to be processed. \nCurrently there is one such invalid deposit of 50M USDC which must be canceled in order for the funds to be recovered and put to use. The deposit is invalid because the wrong vault number was used, and the vault number and stark key specified in the deposit transaction do not match.\n  \n**Implementation**\n\nUpgraded Stark Proxy implementation [Stark Proxy V2](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/stark-proxy/README.md) is open-sourced in the dYdX Foundation governance contracts repository.\n\n\n**Test Cases**\n\nTest cases for Stark Proxy have been extended to cover new V2 functions. It is open-sourced in the dYdX Foundation [Stark Proxy tests](https://github.com/dydxfoundation/governance-contracts/tree/master/test/stark-proxy) folder. The deposit and cancelation process was thoroughly tested in both test and mainnet fork environments.\n\n[Detailed instructions](https://github.com/dydxfoundation/governance-contracts/blob/master/contracts/stark-proxy/README.md) are provided on GitHub to allow anybody to run the same tests.\n\n**Copyright**\n\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n",
    "ipfsHash": "QmcS5tHrVCYLqNMa1f2wy8BxH4S675exNEddREnwED474Z",
    "encodeIpfsHash": "0xd167fcb63051ad9d279acab717a8d19966e1d111beb92d16619c1851ed999afe"
  },
  {
    "preview": "---\nDIP: 6\ntitle: dYdX Grants Program\nstatus: Proposed\nauthor: …",
    "basename": "DIP-6",
    "description": "---\nDIP: 6\ntitle: dYdX Grants Program\nstatus: Proposed\nauthor: Reverie\nshortDescription: Launch a Grants Program with $6.25m from the Community Treasury\ndiscussions: https://forums.dydx.community/proposal/discussion/2511-drc-dydx-grants-program/\ncreated: 2022-01-02\n\n\n## Simple Summary\n\nLaunch the dYdX Grants Program with $6.25m moved from the Community Treasury to the Grants Multi-sig.\n\n## Abstract\n\nReverie is proposing to lead a Grants program for the dYdX community to engage participants and attract new contributors. Grants will include both small and large projects with grantees ranging from single individuals to institutional teams. A Grants Committee, specified in the DRC, will control the multi-sig and\nadvise the lead team on grants. A list of initial RFP ideas has been published on the website with the hopes of inspiring future contributors. Applicants are\nencouraged to apply for existing RFPs or propose new Grant projects. The lead team will review all applications and submit funding proposals to the Committee.\n\nThe snapshot vote concluded with 314 voters and 18M DYDX in agreement (98.9%). The vote results have shown significant support for the program.\nhttps://forums.dydx.community/snapshot/dydxgov.eth/0xe77513bfec9f55b1d620d973af1c4da1266ceffd333cbb120bc54a9359d27a40\n\n**Relevant Links**\n\nDGP website: https://dydxgrants.com/\n\nDRC discussion: https://forums.dydx.community/proposal/discussion/2511-drc-dydx-grants-program/\n\n## Motivation\n\nThe goal of the program is to increase the contributor count and actively promote the growth of the dYdX protocol. While initial grants cannot directly change\nthe dYdX product or core development, Grantees will have the opportunity to impact growth through external tools and non-technical projects (e.g. Analytics dashboards, newsletters, governance etc..). This contributor growth will lead to improvements across both user experiences and the overall community.\n\n## Specification\n\n**Program Design**\n\n* $3m DYDX Funding per quarter for two quarters\n* 1 Full Time Lead\n* 8 Committee Members\n* Committee Member held Multi-Sig\n\nThe treasury will move $6.25m worth of DYDX to the Committee Member multi-sig.\n\nFunds will be used to reward Grantees, pay the Lead and cover additional program costs. Grantees will be subject to milestones that can determine compensation structure, with standard payouts being 25% upfront and the remainder upon completion.\n\n**DYDX Amount**\n\nThe amount of DYDX to be moved from the community treasury to the DGP Multisig will be determined using a 24h vwap of the trades executed on the most liquid exchange, namely Binance.com. Given it makes up roughly 30% of the 24h volume, the DYDX/USDT Binance market data will be used to derive a market price. The data will be pulled from https://data.binance.vision/?prefix=data/spot/daily/trades/DYDXUSDT/. The previous day's trades will be used to capture a full 24h window so as to avoid timing constraints. As such, we will use the following data set: https://data.binance.vision/data/spot/daily/trades/DYDXUSDT/DYDXUSDT-trades-2022-01-01.zip.\n\nThis formula will be used to calculate the price: Σ(Price * Volume) / Σ(Volume).\n\nFrom the data above, we find: $16,199,143.30 / 1,949,010.42 = $8.31.\n\nThe DYDX Amount to be transferred will be $6,250,000 / $8.31 = **752000.00** (rounded up to the nearest thousand for simplicity).\n\n\n## Rationale\n\nThe community has addressed certain concerns and issues with a Grants program in the DRC, but overall consensus has been in strong support of launching. The program will make productive use of treasury funds to promote the protocol and engage contributors. Promoting external tools and analytics dashboards, among other projects, will improve the product experience and should lead to user growth. The program will also attract third party providers and other institutional teams that can build bridges and relevant tools to improve governance and trading experiences.\nGrants programs have been successful to grow an active contributor base and benefit the underlying protocol. We hope to bring this same positive growth to dYdX with this program.\n\n\n## Copyright\n\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n",
    "ipfsHash": "QmQB9RvzgF9FtmF2hP3HobtdKsCwMky4EHtxbTKc7iRDgV",
    "encodeIpfsHash": "0x1b480a746abca660fafb27fdcf13284c6983bbe8b718d719981e324251dfed72"
  },
  {
    "DIP": 7,
    "title": "Update Trading & Liquidity Provider rewards formulas to include holding of stkDYDX",
    "status": "Proposed",
    "author": "Jeffrey Walfred",
    "shortDescription": "Update Trading & Liquidity Provider rewards formulas to include holding of stkDYDX",
    "discussions": "https://forums.dydx.community/proposal/discussion/2940-drc-update-trading-liquidity-provider-rewards-formulas-to-include-holding-of-stkdydx/",
    "created": "2021-12-21T00:00:00.000Z",
    "preview": "## Simple Summary\n\nTo better incentivize utility of the DYDX token, …",
    "basename": "DIP-7",
    "description": "\n\n## Simple Summary\n\nTo better incentivize utility of the DYDX token, usage of the dYdX ecosystem, and to protect the protocol through increased adoption of the Safety Staking Pool, the dYdX Foundation proposed to adjust the formulas for Trading Rewards and Liquidity Provider Rewards to both include holding of stkDYDX. The dYdX Community voted and approved these changes via a Snapshot vote that concluded on December 20, 2021.\n\n## Abstract\n\nIn response to a thread that the dYdX Foundation posted proposing these changes, a community member submitted a snapshot vote on December 15, 2021 to conclude on December 20, 2021.\n\nThe Snapshot vote concluded with 864.64K DYDX voting “Yes” and 1.54K DYDX voting “No.” 316 unique addresses voted in the snapshot. The majority of the community (312 voters & 99.82% of DYDX) supported to change the formulas.\n\nRelevant Links:\nForum discussion proposing the update: https://forums.dydx.community/proposal/discussion/2940-drc-update-trading-liquidity-provider-rewards-formulas-to-include-holding-of-stkdydx/\n\nSnapshot vote: https://snapshot.org/#/dydxgov.eth/proposal/0xfbcb8104dc469cae09727dea89577f89b37df784c3ef2715b26ab77e9ae15161\n\n## Motivation\n\nIt is quite clear that the existing liquidity mining programs have been extremely successful in incentivizing onboarding and usage of the dYdX protocol since its inception. However, the liquidity mining programs do not currently incentivize users to remain participants in the dYdX ecosystem. This proposal aims to address this issue.\n\n## Rationale\n\nBy including stkDYDX as variables in the Trading Rewards and Liquidity Provider Reward formulas, the community can better convert dYdX protocol users to become long term participants in the dYdX ecosystem and, ultimately, contributors to the protocol while further protecting the protocol from existential black-swan events via increasing the size of the Safety Staking Pool.\n\n## Implementation\n\nDYDX smart contracts do not directly control the liquidity mining formulas. If approved, the dYdX Foundation will request that dYdX Trading Inc. implement the changes in time for Epoch 5.\n\n## Copyright\n\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n",
    "ipfsHash": "Qma4EngWtzwK4pLfAeTyVgiYGd2WgXEUhoCyb8xHjUAU1M",
    "encodeIpfsHash": "0xae17e7091f2495d3875b17b4da0483546516334d6e0c286cf68d446454c093b8"
  }
]